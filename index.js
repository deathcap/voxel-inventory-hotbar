// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, InventoryHotbar, InventoryWindow,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = (require('events')).EventEmitter;

  InventoryWindow = require('inventory-window');

  module.exports = function(game, opts) {
    return new InventoryHotbar(game, opts);
  };

  InventoryHotbar = (function(_super) {
    __extends(InventoryHotbar, _super);

    function InventoryHotbar(game, opts) {
      var container, windowOpts, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      this.game = game;
      if (opts == null) {
        opts = {};
      }
      this.inventory = (function() {
        if ((_ref = opts.inventory) != null) {
          return _ref;
        } else {
          throw 'voxel-inventory-toolbar requires "inventory" option set to inventory instance';
        }
      })();
      this.registry = (function() {
        if ((_ref1 = opts.registry) != null) {
          return _ref1;
        } else {
          throw 'voxel-inventory-toolbar requires "registry" option set to voxel-registry instance';
        }
      })();
      windowOpts = (_ref2 = opts.windowOpts) != null ? _ref2 : {};
      if (windowOpts.inventory == null) {
        windowOpts.inventory = this.inventory;
      }
      if (windowOpts.inventorySize == null) {
        windowOpts.inventorySize = (_ref3 = opts.inventorySize) != null ? _ref3 : this.inventory.size();
      }
      if (windowOpts.width == null) {
        windowOpts.width = (_ref4 = opts.width) != null ? _ref4 : windowOpts.inventorySize;
      }
      if (windowOpts.getTexture == null) {
        windowOpts.getTexture = (_ref5 = opts.getTexture) != null ? _ref5 : function(itemPile) {
          return game.materials.texturePath + _this.registry.getItemProps(itemPile.item).itemTexture + '.png';
        };
      }
      this.inventoryWindow = new InventoryWindow(windowOpts);
      container = this.inventoryWindow.createContainer();
      console.log('old style=', container.style);
      container.style.position = 'fixed';
      container.style.bottom = '0px';
      container.style.zIndex = 100;
      container.style.right = '33%';
      container.style.left = '33%';
      console.log('new style=', container.style);
      document.body.appendChild(container);
      this.currentSlot = 0;
      this.enable();
    }

    InventoryHotbar.prototype.enable = function() {
      return this.inventoryWindow.container.style.visibility = '';
    };

    InventoryHotbar.prototype.disable = function() {
      return this.inventoryWindow.container.style.visibility = 'hidden';
    };

    InventoryHotbar.prototype.give = function(itemPile) {
      return this.inventory.give(itemPile);
    };

    InventoryHotbar.prototype.take = function(itemPile) {
      return this.inventory.take(itemPile);
    };

    InventoryHotbar.prototype.takeHeld = function(count) {
      if (count == null) {
        count = 1;
      }
      return this.inventory.takeAt(this.currentSlot, count);
    };

    InventoryHotbar.prototype.held = function() {
      return this.inventory.get(this.currentSlot);
    };

    InventoryHotbar.prototype.refresh = function() {
      return this.inventoryWindow.refresh();
    };

    return InventoryHotbar;

  })(EventEmitter);

}).call(this);
